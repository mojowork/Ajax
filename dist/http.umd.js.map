{"version":3,"file":"http.umd.js","sources":["../src/helpers/uitl.ts","../src/helpers/url.ts","../src/http.ts"],"sourcesContent":["const toString = Object.prototype.toString;\n\nexport function isObject(obj: any) : boolean{\n  return toString.call(obj) === '[object Object]';\n}\n\nexport function isDate(date: any): boolean {\n  return toString.call(date) === '[object Date]';\n}","import { isObject, isDate} from './uitl';\n\nexport function buildUrl(url: string, params?: any) {\n  // 如果没有参数，直接返回url\n  if (!params) return url;\n  // 有对象参数，序列化成一个字符串\n  let serializedParams: string = Object.keys(params).reduce((partial, key) => {\n    const value = params[key];\n    switch(true){\n      case value == null:  // 空值忽略  null、undefined\n        break;\n\n      case Array.isArray(value):  // 值为数组  foo[]=bar&foo[]=baz'\n        let arrStr = value.reduce((str: string, item: any) => {\n          return `${str}&${key}[]=${item}`;\n        }, '');\n        partial = `${partial}${arrStr}`;\n        break;\n\n      case isObject(value):  // 值为对象 对象需要encode \n        let objStr = encodeURIComponent(value);\n        partial = `${partial}&${key}=${objStr}`;\n        break;\n\n      case isDate(value):  // 值为 Date 类型 Date.toISOString()操作\n        let dateStr = value.toISOString();\n        partial = `${partial}&${key}=${dateStr}`;\n        break;\n\n        default: \n        partial = `${partial}&${key}=${value}`;\n        break;\n\n    }\n\n    return partial;\n\n  }, '');\n\n  if (url.indexOf('#') !== -1) url = url.substr(0, url.indexOf('#')); // 去除哈希值\n\n  return url.indexOf('?')!== -1\n    ? `${url}${serializedParams}`\n    : `${url}?${serializedParams.substr(1)}`;\n\n}","import { HttpRequestConfig } from './types';\nimport { buildUrl } from './helpers/url';\n\nfunction http(config: HttpRequestConfig): void {\n  const {url, methed='GET', params=null, data=null} = config;\n  let buildedUrl = url;\n  if (methed === 'GET'){\n    buildedUrl = buildUrl(url, params);\n  }\n  const xhr = new XMLHttpRequest();\n  xhr.open(methed, buildedUrl, true);\n  xhr.send(data);\n}\n\nexport default http;\n"],"names":[],"mappings":";;;;;;EAAA,IAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAE3C,WAAgB,QAAQ,CAAC,GAAQ;MAC/B,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB,CAAC;EAClD,CAAC;AAED,WAAgB,MAAM,CAAC,IAAS;MAC9B,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,eAAe,CAAC;EACjD,CAAC;;WCNe,QAAQ,CAAC,GAAW,EAAE,MAAY;;MAEhD,IAAI,CAAC,MAAM;UAAE,OAAO,GAAG,CAAC;;MAExB,IAAI,gBAAgB,GAAW,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,GAAG;UACrE,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;UAC1B,QAAO,IAAI;cACT,KAAK,KAAK,IAAI,IAAI;kBAChB,MAAM;cAER,KAAK,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;kBACvB,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,UAAC,GAAW,EAAE,IAAS;sBAC/C,OAAU,GAAG,SAAI,GAAG,WAAM,IAAM,CAAC;mBAClC,EAAE,EAAE,CAAC,CAAC;kBACP,OAAO,GAAG,KAAG,OAAO,GAAG,MAAQ,CAAC;kBAChC,MAAM;cAER,KAAK,QAAQ,CAAC,KAAK,CAAC;kBAClB,IAAI,MAAM,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;kBACvC,OAAO,GAAM,OAAO,SAAI,GAAG,SAAI,MAAQ,CAAC;kBACxC,MAAM;cAER,KAAK,MAAM,CAAC,KAAK,CAAC;kBAChB,IAAI,OAAO,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;kBAClC,OAAO,GAAM,OAAO,SAAI,GAAG,SAAI,OAAS,CAAC;kBACzC,MAAM;cAEN;kBACA,OAAO,GAAM,OAAO,SAAI,GAAG,SAAI,KAAO,CAAC;kBACvC,MAAM;WAET;UAED,OAAO,OAAO,CAAC;OAEhB,EAAE,EAAE,CAAC,CAAC;MAEP,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;UAAE,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;MAEnE,OAAO,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,CAAC;YACzB,KAAG,GAAG,GAAG,gBAAkB;YACxB,GAAG,SAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAG,CAAC;EAE7C,CAAC;;EC1CD,SAAS,IAAI,CAAC,MAAyB;MAC9B,IAAA,gBAAG,EAAE,kBAAY,EAAZ,mCAAY,EAAE,kBAAW,EAAX,kCAAW,EAAE,gBAAS,EAAT,gCAAS,CAAW;MAC3D,IAAI,UAAU,GAAG,GAAG,CAAC;MACrB,IAAI,MAAM,KAAK,KAAK,EAAC;UACnB,UAAU,GAAG,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;OACpC;MACD,IAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;MACjC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;MACnC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EACjB,CAAC;;;;;;;;"}